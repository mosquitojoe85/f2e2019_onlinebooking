{"version":3,"sources":["assets/logo.svg","assets/photo1.png","assets/photo2.png","assets/photo3.png","assets/photo4.png","assets/photo5.png","assets/photo6.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","btns","App","useState","bgIndex","setBgIndex","className","src","logo","alt","map","el","key","onClick","path","mdiCheckboxBlankCircle","size","color","mdiCheckboxBlankCircleOutline","photo1","photo2","photo3","photo4","photo5","photo6","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,sTCYrCC,EAAO,CAAC,EAAG,EAAG,EAAG,GA8DRC,MA5Df,WAAgB,IAAD,EACiBC,mBAAS,GAD1B,mBACNC,EADM,KACGC,EADH,KAab,OACE,yBAAKC,UAAS,uBAAkBF,IAC9B,yBAAKE,UAAU,OACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,aAAY,yBAAKC,IAAKC,IAAMC,IAAI,UAC/C,yBAAKH,UAAU,oBACb,yEACA,kGACA,yCACA,+CAEF,yBAAKA,UAAU,mBArBdL,EAAKS,IAAI,SAAAC,GAAE,OAChB,yBAAKC,IAAG,eAAUD,GAAML,UAAU,MAAMO,QAAS,kBAAMR,EAAWM,KAC/DA,IAAOP,EACJ,kBAAC,IAAD,CAAMU,KAAMC,IAAwBC,KAAK,OAAOC,MAAM,YACtD,kBAAC,IAAD,CAAMH,KAAMI,IAA+BF,KAAK,OAAOC,MAAM,iBAqBjE,yBAAKX,UAAU,YACb,yBAAKA,UAAU,YACb,yBAAKC,IAAKY,IAAQV,IAAI,UACtB,yBAAKH,UAAU,kBAAf,gBAEF,yBAAKA,UAAU,YACb,yBAAKC,IAAKa,IAAQX,IAAI,UACtB,yBAAKH,UAAU,kBAAf,gBAEF,yBAAKA,UAAU,YACb,yBAAKC,IAAKc,IAAQZ,IAAI,UACtB,yBAAKH,UAAU,kBAAf,cAEF,yBAAKA,UAAU,YACb,yBAAKC,IAAKe,IAAQb,IAAI,UACtB,yBAAKH,UAAU,kBAAf,uBAEF,yBAAKA,UAAU,YACb,yBAAKC,IAAKgB,IAAQd,IAAI,UACtB,yBAAKH,UAAU,kBAAf,uBAEF,yBAAKA,UAAU,YACb,yBAAKC,IAAKiB,IAAQf,IAAI,UACtB,yBAAKH,UAAU,kBAAf,yBCrDQmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9070cf38.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3fafe707.svg\";","module.exports = __webpack_public_path__ + \"static/media/photo1.805ea723.png\";","module.exports = __webpack_public_path__ + \"static/media/photo2.803089b2.png\";","module.exports = __webpack_public_path__ + \"static/media/photo3.0c119ef6.png\";","module.exports = __webpack_public_path__ + \"static/media/photo4.b66da979.png\";","module.exports = __webpack_public_path__ + \"static/media/photo5.2dbddf5f.png\";","module.exports = __webpack_public_path__ + \"static/media/photo6.4558f5bc.png\";","import React, { useState } from 'react';\nimport './App.css';\nimport logo from './assets/logo.svg';\nimport photo1 from './assets/photo1.png';\nimport photo2 from './assets/photo2.png';\nimport photo3 from './assets/photo3.png';\nimport photo4 from './assets/photo4.png';\nimport photo5 from './assets/photo5.png';\nimport photo6 from './assets/photo6.png';\nimport Icon from '@mdi/react'\nimport { mdiCheckboxBlankCircle, mdiCheckboxBlankCircleOutline } from '@mdi/js';\n\nconst btns = [0, 1, 2, 3];\n\nfunction App() {\n  const [bgIndex, setBgIndex] = useState(0);\n  const renderBtns = () => {\n    return btns.map(el => (\n      <div key={`bgBtn${el}`} className=\"btn\" onClick={() => setBgIndex(el)}>\n        {el === bgIndex\n          ? <Icon path={mdiCheckboxBlankCircle} size=\"12px\" color=\"#ffffff\" />\n          : <Icon path={mdiCheckboxBlankCircleOutline} size=\"12px\" color=\"#ffffff\" />\n        }\n      </div>\n    ));\n  }\n\n  return (\n    <div className={`appWrapper bg${bgIndex}`}>\n      <div className=\"app\">\n        <div className=\"leftCol\">\n          <div className=\"logoBlock\"><img src={logo} alt=\"logo\" /></div>\n          <div className=\"houseDetailBlock\">\n            <h1>好室旅店。HOUSE HOTEL</h1>\n            <p>花蓮縣花蓮市國聯一路1號</p>\n            <p>03-8321155</p>\n            <p>HOUSE@HOTEL.COM</p>\n          </div>\n          <div className=\"bgIndexBtnBlock\">\n            {renderBtns()}\n          </div>\n        </div>\n        <div className=\"rightCol\">\n          <div className=\"roomGrid\">\n            <img src={photo1} alt=\"room1\" />\n            <div className=\"roomGrid_hover\">Single Room</div>\n          </div>\n          <div className=\"roomGrid\">\n            <img src={photo2} alt=\"room2\" />\n            <div className=\"roomGrid_hover\">Double Room</div>\n          </div>\n          <div className=\"roomGrid\">\n            <img src={photo3} alt=\"room3\" />\n            <div className=\"roomGrid_hover\">Twin Room</div>\n          </div>\n          <div className=\"roomGrid\">\n            <img src={photo4} alt=\"room4\" />\n            <div className=\"roomGrid_hover\">Deluxe Single Room</div>\n          </div>\n          <div className=\"roomGrid\">\n            <img src={photo5} alt=\"room5\" />\n            <div className=\"roomGrid_hover\">Deluxe Double Room</div>\n          </div>\n          <div className=\"roomGrid\">\n            <img src={photo6} alt=\"room6\" />\n            <div className=\"roomGrid_hover\">Deluxe Twin Room</div>\n          </div>\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}